name: Release

on:
  push:
    branches:
      - main
      - master
      - refactor

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 2

      # Install Nix with flakes support
      - uses: cachix/install-nix-action@v31
        with:
          extra_nix_config: |
            experimental-features = nix-command flakes
      
      # Note: To enable Cachix caching, set up a CACHIX_AUTH_TOKEN secret in your repository settings
      # and uncomment the following section
      #
      # - name: Setup Cachix
      #   uses: cachix/cachix-action@v14
      #   with:
      #     name: intellifire4py
      #     authToken: ${{ secrets.CACHIX_AUTH_TOKEN }}
      
      # Setup environment with dependencies
      - name: Setup environment
        run: |
          nix develop -c bash -c '
            # Create and activate virtual environment
            uv venv
            source .venv/bin/activate
            
            # Install dependencies
            uv pip install -e ".[dev]"
            uv pip install build twine
          '

      - name: Check if there is a parent commit
        id: check-parent-commit
        run: |
          echo "sha=$(git rev-parse --verify --quiet HEAD^)" >> $GITHUB_OUTPUT

      - name: Detect and tag new version
        id: check-version
        if: steps.check-parent-commit.outputs.sha
        uses: salsify/action-detect-and-tag-new-version@v2.0.3
        with:
          version-command: python -c "import tomli; print(tomli.load(open('pyproject.toml', 'rb'))['project']['version'])"
          create-tag: true
          tag-template: v{VERSION}
          tag-annotation-template: Released version {VERSION}

      - name: Bump version for developmental release
        if: ${{ ! steps.check-version.outputs.tag }}
        run: |
          source .venv/bin/activate
          current_version=$(grep -m1 'version =' pyproject.toml | cut -d '"' -f 2)
          uv version --bump patch
          new_version=$(grep -m1 'version =' pyproject.toml | cut -d '"' -f 2)
          sed -i "s/version = \"$new_version\"/version = \"$new_version.dev.$(date +%s)\"/" pyproject.toml

      - name: Build package
        run: |
          source .venv/bin/activate
          python -m build

      - name: Publish package on PyPI
        if: steps.check-version.outputs.tag
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          user: __token__
          password: ${{ secrets.PYPI_TOKEN }}

      - name: Publish package on TestPyPI
        if: ${{ !steps.check-version.outputs.tag }}
        uses: pypa/gh-action-pypi-publish@v1.12.4
        with:
          user: __token__
          password: ${{ secrets.TEST_PYPI_TOKEN }}
          repository-url: https://test.pypi.org/legacy/

      - name: Publish the release notes
        uses: release-drafter/release-drafter@v6.1.0
        with:
          publish: ${{ steps.check-version.outputs.tag != '' }}
          tag: ${{ steps.check-version.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
